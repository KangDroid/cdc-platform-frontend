/* tslint:disable */

/* eslint-disable */

/**
 * Platform.Workflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  RequestArgs,
  RequiredError,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import { CreateWorkflowRequest } from '../model';
// @ts-ignore
import { WorkflowResponse } from '../model';

/**
 * WorkflowApi - axios parameter creator
 * @export
 */
export const WorkflowApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Workflow를 새로 생성합니다.
     * @param {CreateWorkflowRequest} [CreateWorkflowRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowAsync: async (
      CreateWorkflowRequest?: CreateWorkflowRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/workflows`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JwtAuthenticationFilter required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        CreateWorkflowRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowAsync: async (
      workflowId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'workflowId' is not null or undefined
      assertParamExists('deleteWorkflowAsync', 'workflowId', workflowId);
      const localVarPath = `/workflows/{workflowId}`.replace(
        `{${'workflowId'}}`,
        encodeURIComponent(String(workflowId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JwtAuthenticationFilter required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowAsync: async (
      workflowId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'workflowId' is not null or undefined
      assertParamExists('getWorkflowAsync', 'workflowId', workflowId);
      const localVarPath = `/workflows/{workflowId}`.replace(
        `{${'workflowId'}}`,
        encodeURIComponent(String(workflowId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JwtAuthenticationFilter required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowAsync: async (
      includeDeleted?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/workflows`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JwtAuthenticationFilter required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includeDeleted !== undefined) {
        localVarQueryParameter['includeDeleted'] = includeDeleted;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startWorkflowAsync: async (
      workflowId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'workflowId' is not null or undefined
      assertParamExists('startWorkflowAsync', 'workflowId', workflowId);
      const localVarPath = `/workflows/{workflowId}/start`.replace(
        `{${'workflowId'}}`,
        encodeURIComponent(String(workflowId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JwtAuthenticationFilter required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WorkflowApi - functional programming interface
 * @export
 */
export const WorkflowApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WorkflowApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Workflow를 새로 생성합니다.
     * @param {CreateWorkflowRequest} [CreateWorkflowRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createWorkflowAsync(
      CreateWorkflowRequest?: CreateWorkflowRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createWorkflowAsync(
          CreateWorkflowRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteWorkflowAsync(
      workflowId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteWorkflowAsync(
          workflowId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWorkflowAsync(
      workflowId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<WorkflowResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getWorkflowAsync(workflowId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listWorkflowAsync(
      includeDeleted?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<WorkflowResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listWorkflowAsync(
          includeDeleted,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async startWorkflowAsync(
      workflowId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.startWorkflowAsync(workflowId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * WorkflowApi - factory interface
 * @export
 */
export const WorkflowApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WorkflowApiFp(configuration);
  return {
    /**
     *
     * @summary Workflow를 새로 생성합니다.
     * @param {CreateWorkflowRequest} [CreateWorkflowRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowAsync(
      CreateWorkflowRequest?: CreateWorkflowRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createWorkflowAsync(CreateWorkflowRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowAsync(workflowId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteWorkflowAsync(workflowId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowAsync(
      workflowId: string,
      options?: any,
    ): AxiosPromise<WorkflowResponse> {
      return localVarFp
        .getWorkflowAsync(workflowId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowAsync(
      includeDeleted?: boolean,
      options?: any,
    ): AxiosPromise<Array<WorkflowResponse>> {
      return localVarFp
        .listWorkflowAsync(includeDeleted, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startWorkflowAsync(workflowId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .startWorkflowAsync(workflowId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WorkflowApi - object-oriented interface
 * @export
 * @class WorkflowApi
 * @extends {BaseAPI}
 */
export class WorkflowApi extends BaseAPI {
  /**
   *
   * @summary Workflow를 새로 생성합니다.
   * @param {CreateWorkflowRequest} [CreateWorkflowRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApi
   */
  public createWorkflowAsync(
    CreateWorkflowRequest?: CreateWorkflowRequest,
    options?: AxiosRequestConfig,
  ) {
    return WorkflowApiFp(this.configuration)
      .createWorkflowAsync(CreateWorkflowRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} workflowId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApi
   */
  public deleteWorkflowAsync(workflowId: string, options?: AxiosRequestConfig) {
    return WorkflowApiFp(this.configuration)
      .deleteWorkflowAsync(workflowId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} workflowId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApi
   */
  public getWorkflowAsync(workflowId: string, options?: AxiosRequestConfig) {
    return WorkflowApiFp(this.configuration)
      .getWorkflowAsync(workflowId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {boolean} [includeDeleted]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApi
   */
  public listWorkflowAsync(
    includeDeleted?: boolean,
    options?: AxiosRequestConfig,
  ) {
    return WorkflowApiFp(this.configuration)
      .listWorkflowAsync(includeDeleted, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} workflowId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApi
   */
  public startWorkflowAsync(workflowId: string, options?: AxiosRequestConfig) {
    return WorkflowApiFp(this.configuration)
      .startWorkflowAsync(workflowId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
